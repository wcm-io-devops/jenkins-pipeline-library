/*-
 * #%L
 * wcm.io
 * %%
 * Copyright (C) 2017 - 2019 wcm.io DevOps
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */
/**
 * gdsl for jenkins pipeline (global script scope), exportet from Jenkins
 *
 * format reference:  https://confluence.jetbrains.com/display/GRVY/Scripting+IDE+for+DSL+awareness#ScriptingIDEforDSLawareness-DescribingGroovyDSLinternallanguageinitsownterms
 */
def ctx = context(scope: scriptScope())
contributor(ctx) {
  method(name: 'VersionNumber', type: 'Object', params: [versionNumberString:'java.lang.String'], doc: 'Determine the correct version number')
  method(name: 'VersionNumber', type: 'Object', namedParams: [parameter(name: 'versionNumberString', type: 'java.lang.String'), parameter(name: 'overrideBuildsAllTime', type: 'java.lang.String'), parameter(name: 'overrideBuildsThisMonth', type: 'java.lang.String'), parameter(name: 'overrideBuildsThisWeek', type: 'java.lang.String'), parameter(name: 'overrideBuildsThisYear', type: 'java.lang.String'), parameter(name: 'overrideBuildsToday', type: 'java.lang.String'), parameter(name: 'projectStartDate', type: 'java.lang.String'), parameter(name: 'skipFailedBuilds', type: 'boolean'), parameter(name: 'versionPrefix', type: 'java.lang.String'), parameter(name: 'worstResultForIncrement', type: 'java.lang.String'), ], doc: 'Determine the correct version number')
  method(name: 'addBadge', type: 'Object', namedParams: [parameter(name: 'icon', type: 'java.lang.String'), parameter(name: 'text', type: 'java.lang.String'), parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'link', type: 'java.lang.String'), ], doc: 'Add Badge')
  method(name: 'addErrorBadge', type: 'Object', params: [text:'java.lang.String'], doc: 'Add Error Badge')
  method(name: 'addErrorBadge', type: 'Object', namedParams: [parameter(name: 'text', type: 'java.lang.String'), parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'link', type: 'java.lang.String'), ], doc: 'Add Error Badge')
  method(name: 'addHtmlBadge', type: 'Object', params: [html:'java.lang.String'], doc: 'Add a html badge Text')
  method(name: 'addHtmlBadge', type: 'Object', namedParams: [parameter(name: 'html', type: 'java.lang.String'), parameter(name: 'id', type: 'java.lang.String'), ], doc: 'Add a html badge Text')
  method(name: 'addInfoBadge', type: 'Object', params: [text:'java.lang.String'], doc: 'Add Info Badge')
  method(name: 'addInfoBadge', type: 'Object', namedParams: [parameter(name: 'text', type: 'java.lang.String'), parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'link', type: 'java.lang.String'), ], doc: 'Add Info Badge')
  method(name: 'addShortText', type: 'Object', params: [text:'java.lang.String'], doc: 'Add Short Text')
  method(name: 'addShortText', type: 'Object', namedParams: [parameter(name: 'text', type: 'java.lang.String'), parameter(name: 'background', type: 'java.lang.String'), parameter(name: 'border', type: 'java.lang.Integer'), parameter(name: 'borderColor', type: 'java.lang.String'), parameter(name: 'color', type: 'java.lang.String'), parameter(name: 'link', type: 'java.lang.String'), ], doc: 'Add Short Text')
  method(name: 'addWarningBadge', type: 'Object', params: [text:'java.lang.String'], doc: 'Add Warning Badge')
  method(name: 'addWarningBadge', type: 'Object', namedParams: [parameter(name: 'text', type: 'java.lang.String'), parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'link', type: 'java.lang.String'), ], doc: 'Add Warning Badge')
  method(name: 'ansiColor', type: 'Object', params: [colorMapName:java.lang.String, body:'Closure'], doc: 'Color ANSI Console Output')
  method(name: 'build', type: 'Object', params: [job:'java.lang.String'], doc: 'Build a job')
  method(name: 'build', type: 'Object', namedParams: [parameter(name: 'job', type: 'java.lang.String'), parameter(name: 'parameters', type: 'Map'), parameter(name: 'propagate', type: 'boolean'), parameter(name: 'quietPeriod', type: 'java.lang.Integer'), parameter(name: 'wait', type: 'boolean'), ], doc: 'Build a job')
  method(name: 'createSummary', type: 'Object', params: [icon:'java.lang.String'], doc: 'Print Message')
  method(name: 'createSummary', type: 'Object', namedParams: [parameter(name: 'icon', type: 'java.lang.String'), parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'text', type: 'java.lang.String'), ], doc: 'Print Message')
  method(name: 'echo', type: 'Object', params: [message:'java.lang.String'], doc: 'Print Message')
  method(name: 'emailext', type: 'Object', namedParams: [parameter(name: 'subject', type: 'java.lang.String'), parameter(name: 'body', type: 'java.lang.String'), parameter(name: 'attachLog', type: 'boolean'), parameter(name: 'attachmentsPattern', type: 'java.lang.String'), parameter(name: 'compressLog', type: 'boolean'), parameter(name: 'from', type: 'java.lang.String'), parameter(name: 'mimeType', type: 'java.lang.String'), parameter(name: 'postsendScript', type: 'java.lang.String'), parameter(name: 'presendScript', type: 'java.lang.String'), parameter(name: 'recipientProviders', type: 'Map'), parameter(name: 'replyTo', type: 'java.lang.String'), parameter(name: 'to', type: 'java.lang.String'), ], doc: 'Extended Email')
  method(name: 'emailextrecipients', type: 'Object', params: [recipientProviders:'Map'], doc: 'Extended Email Recipients')
  method(name: 'error', type: 'Object', params: [message:'java.lang.String'], doc: 'Error signal')
  method(name: 'httpRequest', type: 'Object', params: [url:'java.lang.String'], doc: 'Perform an HTTP Request and return a response object')
  method(name: 'httpRequest', type: 'Object', namedParams: [parameter(name: 'url', type: 'java.lang.String'), parameter(name: 'acceptType', type: 'Map'), parameter(name: 'authentication', type: 'java.lang.String'), parameter(name: 'consoleLogResponseBody', type: 'java.lang.Boolean'), parameter(name: 'contentType', type: 'Map'), parameter(name: 'customHeaders', type: 'Map'), parameter(name: 'httpMode', type: 'Map'), parameter(name: 'httpProxy', type: 'java.lang.String'), parameter(name: 'ignoreSslErrors', type: 'boolean'), parameter(name: 'outputFile', type: 'java.lang.String'), parameter(name: 'quiet', type: 'java.lang.Boolean'), parameter(name: 'requestBody', type: 'java.lang.String'), parameter(name: 'responseHandle', type: 'Map'), parameter(name: 'timeout', type: 'java.lang.Integer'), parameter(name: 'validResponseCodes', type: 'java.lang.String'), parameter(name: 'validResponseContent', type: 'java.lang.String'), ], doc: 'Perform an HTTP Request and return a response object')
  method(name: 'input', type: 'Object', params: [message:'java.lang.String'], doc: 'Wait for interactive input')
  method(name: 'input', type: 'Object', namedParams: [parameter(name: 'message', type: 'java.lang.String'), parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'ok', type: 'java.lang.String'), parameter(name: 'parameters', type: 'Map'), parameter(name: 'submitter', type: 'java.lang.String'), parameter(name: 'submitterParameter', type: 'java.lang.String'), ], doc: 'Wait for interactive input')
  method(name: 'isUnix', type: 'Object', params: [:], doc: 'Checks if running on a Unix-like node')
  method(name: 'jiraComment', type: 'Object', namedParams: [parameter(name: 'issueKey', type: 'java.lang.String'), parameter(name: 'body', type: 'java.lang.String'), ], doc: 'JIRA: Add a comment to issue(s)')
  method(name: 'jiraIssueSelector', type: 'Object', params: [:], doc: 'JIRA: Issue selector')
  method(name: 'jiraIssueSelector', type: 'Object', namedParams: [parameter(name: 'issueSelector', type: 'Map'), ], doc: 'JIRA: Issue selector')
  method(name: 'jiraSearch', type: 'Object', params: [jql:'java.lang.String'], doc: 'JIRA: Search issues')
  method(name: 'library', type: 'Object', params: [identifier:'java.lang.String'], doc: 'Load a shared library on the fly')
  method(name: 'library', type: 'Object', namedParams: [parameter(name: 'identifier', type: 'java.lang.String'), parameter(name: 'changelog', type: 'java.lang.Boolean'), parameter(name: 'retriever', type: 'Map'), ], doc: 'Load a shared library on the fly')
  method(name: 'libraryResource', type: 'Object', params: [resource:'java.lang.String'], doc: 'Load a resource file from a shared library')
  method(name: 'libraryResource', type: 'Object', namedParams: [parameter(name: 'resource', type: 'java.lang.String'), parameter(name: 'encoding', type: 'java.lang.String'), ], doc: 'Load a resource file from a shared library')
  method(name: 'lock', type: 'Object', params: [resource:java.lang.String, body:'Closure'], doc: 'Lock shared resource')
  method(name: 'lock', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'resource', type: 'java.lang.String'), parameter(name: 'extra', type: 'Map'), parameter(name: 'inversePrecedence', type: 'boolean'), parameter(name: 'label', type: 'java.lang.String'), parameter(name: 'quantity', type: 'int'), parameter(name: 'variable', type: 'java.lang.String'), ], doc: 'Lock shared resource')
  method(name: 'mail', type: 'Object', namedParams: [parameter(name: 'subject', type: 'java.lang.String'), parameter(name: 'body', type: 'java.lang.String'), parameter(name: 'bcc', type: 'java.lang.String'), parameter(name: 'cc', type: 'java.lang.String'), parameter(name: 'charset', type: 'java.lang.String'), parameter(name: 'from', type: 'java.lang.String'), parameter(name: 'mimeType', type: 'java.lang.String'), parameter(name: 'replyTo', type: 'java.lang.String'), parameter(name: 'to', type: 'java.lang.String'), ], doc: 'Mail')
  method(name: 'mattermostSend', type: 'Object', params: [message:'java.lang.String'], doc: 'Send Mattermost message')
  method(name: 'mattermostSend', type: 'Object', namedParams: [parameter(name: 'message', type: 'java.lang.String'), parameter(name: 'channel', type: 'java.lang.String'), parameter(name: 'color', type: 'java.lang.String'), parameter(name: 'endpoint', type: 'java.lang.String'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'icon', type: 'java.lang.String'), parameter(name: 'text', type: 'java.lang.String'), ], doc: 'Send Mattermost message')
  method(name: 'milestone', type: 'Object', params: [ordinal:'java.lang.Integer'], doc: 'The milestone step forces all builds to go through in order')
  method(name: 'milestone', type: 'Object', namedParams: [parameter(name: 'ordinal', type: 'java.lang.Integer'), parameter(name: 'label', type: 'java.lang.String'), ], doc: 'The milestone step forces all builds to go through in order')
  method(name: 'node', type: 'Object', params: [label:java.lang.String, body:'Closure'], doc: 'Allocate node')
  method(name: 'nodesByLabel', type: 'Object', params: [label:'java.lang.String'], doc: 'List of nodes by Label, by default excludes offline nodes.')
  method(name: 'nodesByLabel', type: 'Object', namedParams: [parameter(name: 'label', type: 'java.lang.String'), parameter(name: 'offline', type: 'boolean'), ], doc: 'List of nodes by Label, by default excludes offline nodes.')
  method(name: 'properties', type: 'Object', params: [properties:'Map'], doc: 'Set job properties')
  method(name: 'publishIssues', type: 'Object', params: [issues:'Map'], doc: 'Publish issues created by a static analysis scan')
  method(name: 'publishIssues', type: 'Object', namedParams: [parameter(name: 'issues', type: 'Map'), parameter(name: 'failedNewAll', type: 'int'), parameter(name: 'failedNewHigh', type: 'int'), parameter(name: 'failedNewLow', type: 'int'), parameter(name: 'failedNewNormal', type: 'int'), parameter(name: 'failedTotalAll', type: 'int'), parameter(name: 'failedTotalHigh', type: 'int'), parameter(name: 'failedTotalLow', type: 'int'), parameter(name: 'failedTotalNormal', type: 'int'), parameter(name: 'healthy', type: 'int'), parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'ignoreFailedBuilds', type: 'boolean'), parameter(name: 'ignoreQualityGate', type: 'boolean'), parameter(name: 'minimumSeverity', type: 'java.lang.String'), parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'qualityGates', type: 'Map'), parameter(name: 'referenceJobName', type: 'java.lang.String'), parameter(name: 'sourceCodeEncoding', type: 'java.lang.String'), parameter(name: 'unhealthy', type: 'int'), parameter(name: 'unstableNewAll', type: 'int'), parameter(name: 'unstableNewHigh', type: 'int'), parameter(name: 'unstableNewLow', type: 'int'), parameter(name: 'unstableNewNormal', type: 'int'), parameter(name: 'unstableTotalAll', type: 'int'), parameter(name: 'unstableTotalHigh', type: 'int'), parameter(name: 'unstableTotalLow', type: 'int'), parameter(name: 'unstableTotalNormal', type: 'int'), ], doc: 'Publish issues created by a static analysis scan')
  method(name: 'readCSV', type: 'Object', params: [:], doc: 'Read content from a CSV file in the workspace.')
  method(name: 'readCSV', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'format', type: 'Map'), parameter(name: 'text', type: 'java.lang.String'), ], doc: 'Read content from a CSV file in the workspace.')
  method(name: 'readJSON', type: 'Object', params: [:], doc: 'Read JSON from files in the workspace.')
  method(name: 'readJSON', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'text', type: 'java.lang.String'), ], doc: 'Read JSON from files in the workspace.')
  method(name: 'readManifest', type: 'Object', params: [:], doc: 'Read a Jar Manifest')
  method(name: 'readManifest', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'text', type: 'java.lang.String'), ], doc: 'Read a Jar Manifest')
  method(name: 'readProperties', type: 'Object', params: [:], doc: 'Read properties from files in the workspace or text.')
  method(name: 'readProperties', type: 'Object', namedParams: [parameter(name: 'defaults', type: 'java.util.Map'), parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'interpolate', type: 'java.lang.Boolean'), parameter(name: 'text', type: 'java.lang.String'), ], doc: 'Read properties from files in the workspace or text.')
  method(name: 'readTrusted', type: 'Object', params: [path:'java.lang.String'], doc: 'Read trusted file from SCM')
  method(name: 'readYaml', type: 'Object', params: [:], doc: 'Read yaml from files in the workspace or text.')
  method(name: 'readYaml', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'text', type: 'java.lang.String'), ], doc: 'Read yaml from files in the workspace or text.')
  method(name: 'removeBadges', type: 'Object', params: [:], doc: 'Remove Badges')
  method(name: 'removeBadges', type: 'Object', namedParams: [parameter(name: 'id', type: 'java.lang.String'), ], doc: 'Remove Badges')
  method(name: 'removeHtmlBadges', type: 'Object', params: [:], doc: 'Remove Html Badges')
  method(name: 'removeHtmlBadges', type: 'Object', namedParams: [parameter(name: 'id', type: 'java.lang.String'), ], doc: 'Remove Html Badges')
  method(name: 'removeSummaries', type: 'Object', params: [:], doc: 'Remove Summaries')
  method(name: 'removeSummaries', type: 'Object', namedParams: [parameter(name: 'id', type: 'java.lang.String'), ], doc: 'Remove Summaries')
  method(name: 'resolveScm', type: 'Object', namedParams: [parameter(name: 'source', type: 'Map'), parameter(name: 'targets', type: 'Map'), parameter(name: 'ignoreErrors', type: 'boolean'), ], doc: 'Resolves an SCM from an SCM Source and a list of candidate target branch names')
  method(name: 'retry', type: 'Object', params: [count:int, body:'Closure'], doc: 'Retry the body up to N times')
  method(name: 'script', type: 'Object', params: [body:'Closure'], doc: 'Run arbitrary Pipeline script')
  method(name: 'sleep', type: 'Object', params: [time:'int'], doc: 'Sleep')
  method(name: 'sleep', type: 'Object', namedParams: [parameter(name: 'time', type: 'int'), parameter(name: 'unit', type: 'java.util.concurrent.TimeUnit'), ], doc: 'Sleep')
  method(name: 'stage', type: 'Object', params: [name:java.lang.String, body:'Closure'], doc: 'Stage')
  method(name: 'stage', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'concurrency', type: 'java.lang.Integer'), ], doc: 'Stage')
  method(name: 'task', type: 'Object', params: [name:java.lang.String, body:'Closure'], doc: 'Task')
  method(name: 'throttle', type: 'Object', params: [categories:Map, body:'Closure'], doc: 'Throttle execution of node blocks within this body')
  method(name: 'timeout', type: 'Object', params: [time:int, body:'Closure'], doc: 'Enforce time limit')
  method(name: 'timeout', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'time', type: 'int'), parameter(name: 'activity', type: 'boolean'), parameter(name: 'unit', type: 'java.util.concurrent.TimeUnit'), ], doc: 'Enforce time limit')
  method(name: 'timestamps', type: 'Object', params: [body:'Closure'], doc: 'Zeitstempel')
  method(name: 'tool', type: 'Object', params: [name:'java.lang.String'], doc: 'Use a tool from a predefined Tool Installation')
  method(name: 'tool', type: 'Object', namedParams: [parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'type', type: 'java.lang.String'), ], doc: 'Use a tool from a predefined Tool Installation')
  method(name: 'waitForQualityGate', type: 'Object', params: [abortPipeline:'boolean'], doc: 'Wait for SonarQube analysis to be completed and return quality gate status')
  method(name: 'waitUntil', type: 'Object', params: [body:'Closure'], doc: 'Wait for condition')
  method(name: 'withCredentials', type: 'Object', params: [bindings:Map, body:'Closure'], doc: 'Bind credentials to variables')
  method(name: 'withEnv', type: 'Object', params: [overrides:Map, body:'Closure'], doc: 'Set environment variables')
  method(name: 'ws', type: 'Object', params: [dir:java.lang.String, body:'Closure'], doc: 'Allocate workspace')
  method(name: 'catchError', type: 'Object', params: [body:'Closure'], doc: 'Advanced/Deprecated Catch error and set build result')
  method(name: 'dockerFingerprintRun', type: 'Object', params: [containerId:'java.lang.String'], doc: 'Advanced/Deprecated Record trace of a Docker image run in a container')
  method(name: 'dockerFingerprintRun', type: 'Object', namedParams: [parameter(name: 'containerId', type: 'java.lang.String'), parameter(name: 'toolName', type: 'java.lang.String'), ], doc: 'Record trace of a Docker image run in a container')
  method(name: 'envVarsForTool', type: 'Object', namedParams: [parameter(name: 'toolId', type: 'java.lang.String'), parameter(name: 'toolVersion', type: 'java.lang.String'), ], doc: 'Fetches the environment variables for a given tool in a list of \'FOO=bar\' strings suitable for the withEnv step.')
  method(name: 'getContext', type: 'Object', params: [type:'Map'], doc: 'Advanced/Deprecated Get contextual object from internal APIs')
  method(name: 'withContext', type: 'Object', params: [context:java.lang.Object, body:'Closure'], doc: 'Advanced/Deprecated Use contextual object from internal APIs within a block')
  property(name: 'docker', type: 'org.jenkinsci.plugins.docker.workflow.DockerDSL')
  property(name: 'pipeline', type: 'org.jenkinsci.plugins.pipeline.modeldefinition.ModelStepLoader')
  property(name: 'env', type: 'org.jenkinsci.plugins.workflow.cps.EnvActionImpl.Binder')
  property(name: 'params', type: 'org.jenkinsci.plugins.workflow.cps.ParamsVariable')
  property(name: 'currentBuild', type: 'org.jenkinsci.plugins.workflow.cps.RunWrapperBinder')
  property(name: 'scm', type: 'org.jenkinsci.plugins.workflow.multibranch.SCMVar')
  property(name: 'manager', type: 'org.jvnet.hudson.plugins.groovypostbuild.WorkflowManager')

}
//Steps that require a node context
def nodeCtx = context(scope: closureScope())
contributor(nodeCtx) {
  def call = enclosingCall('node')
  if (call) {
    method(name: 'ansiblePlaybook', type: 'Object', params: [playbook:'java.lang.String'], doc: 'Invoke an ansible playbook')
    method(name: 'ansiblePlaybook', type: 'Object', namedParams: [parameter(name: 'playbook', type: 'java.lang.String'), parameter(name: 'become', type: 'boolean'), parameter(name: 'becomeUser', type: 'java.lang.String'), parameter(name: 'colorized', type: 'boolean'), parameter(name: 'credentialsId', type: 'java.lang.String'), parameter(name: 'disableHostKeyChecking', type: 'boolean'), parameter(name: 'dynamicInventory', type: 'boolean'), parameter(name: 'extraVars', type: 'java.util.Map'), parameter(name: 'extras', type: 'java.lang.String'), parameter(name: 'forks', type: 'int'), parameter(name: 'hostKeyChecking', type: 'boolean'), parameter(name: 'installation', type: 'java.lang.String'), parameter(name: 'inventory', type: 'java.lang.String'), parameter(name: 'inventoryContent', type: 'java.lang.String'), parameter(name: 'limit', type: 'java.lang.String'), parameter(name: 'skippedTags', type: 'java.lang.String'), parameter(name: 'startAtTask', type: 'java.lang.String'), parameter(name: 'sudo', type: 'boolean'), parameter(name: 'sudoUser', type: 'java.lang.String'), parameter(name: 'tags', type: 'java.lang.String'), parameter(name: 'vaultCredentialsId', type: 'java.lang.String'), ], doc: 'Invoke an ansible playbook')
    method(name: 'ansibleVault', type: 'Object', params: [:], doc: 'Invoke ansible vault')
    method(name: 'ansibleVault', type: 'Object', namedParams: [parameter(name: 'action', type: 'java.lang.String'), parameter(name: 'content', type: 'java.lang.String'), parameter(name: 'input', type: 'java.lang.String'), parameter(name: 'installation', type: 'java.lang.String'), parameter(name: 'newVaultCredentialsId', type: 'java.lang.String'), parameter(name: 'output', type: 'java.lang.String'), parameter(name: 'vaultCredentialsId', type: 'java.lang.String'), ], doc: 'Invoke ansible vault')
    method(name: 'bat', type: 'Object', params: [script:'java.lang.String'], doc: 'Windows Batch Script')
    method(name: 'bat', type: 'Object', namedParams: [parameter(name: 'script', type: 'java.lang.String'), parameter(name: 'encoding', type: 'java.lang.String'), parameter(name: 'label', type: 'java.lang.String'), parameter(name: 'returnStatus', type: 'boolean'), parameter(name: 'returnStdout', type: 'boolean'), ], doc: 'Windows Batch Script')
    method(name: 'checkout', type: 'Object', params: [scm:'Map'], doc: 'Check out from version control')
    method(name: 'checkout', type: 'Object', namedParams: [parameter(name: 'scm', type: 'Map'), parameter(name: 'changelog', type: 'boolean'), parameter(name: 'poll', type: 'boolean'), ], doc: 'Check out from version control')
    method(name: 'deleteDir', type: 'Object', params: [:], doc: 'Recursively delete the current directory from the workspace')
    method(name: 'dir', type: 'Object', params: [path:java.lang.String, body:'Closure'], doc: 'Change current directory')
    method(name: 'fileExists', type: 'Object', params: [file:'java.lang.String'], doc: 'Verify if file exists in workspace')
    method(name: 'findFiles', type: 'Object', params: [:], doc: 'Find files in the workspace')
    method(name: 'findFiles', type: 'Object', namedParams: [parameter(name: 'excludes', type: 'java.lang.String'), parameter(name: 'glob', type: 'java.lang.String'), ], doc: 'Find files in the workspace')
    method(name: 'gatlingArchive', type: 'Object', params: [:], doc: 'Archive Gatling reports')
    method(name: 'git', type: 'Object', params: [url:'java.lang.String'], doc: 'Git')
    method(name: 'git', type: 'Object', namedParams: [parameter(name: 'url', type: 'java.lang.String'), parameter(name: 'branch', type: 'java.lang.String'), parameter(name: 'changelog', type: 'boolean'), parameter(name: 'credentialsId', type: 'java.lang.String'), parameter(name: 'poll', type: 'boolean'), ], doc: 'Git')
    method(name: 'junit', type: 'Object', params: [testResults:'java.lang.String'], doc: 'Archive JUnit-formatted test results')
    method(name: 'junit', type: 'Object', namedParams: [parameter(name: 'testResults', type: 'java.lang.String'), parameter(name: 'allowEmptyResults', type: 'boolean'), parameter(name: 'healthScaleFactor', type: 'double'), parameter(name: 'keepLongStdio', type: 'boolean'), parameter(name: 'testDataPublishers', type: 'Map'), ], doc: 'Archive JUnit-formatted test results')
    method(name: 'load', type: 'Object', params: [path:'java.lang.String'], doc: 'Evaluate a Groovy source file into the Pipeline script')
    method(name: 'powershell', type: 'Object', params: [script:'java.lang.String'], doc: 'PowerShell Script')
    method(name: 'powershell', type: 'Object', namedParams: [parameter(name: 'script', type: 'java.lang.String'), parameter(name: 'encoding', type: 'java.lang.String'), parameter(name: 'label', type: 'java.lang.String'), parameter(name: 'returnStatus', type: 'boolean'), parameter(name: 'returnStdout', type: 'boolean'), ], doc: 'PowerShell Script')
    method(name: 'publishHTML', type: 'Object', params: [target:'Map'], doc: 'Publish HTML reports')
    method(name: 'pwd', type: 'Object', params: [:], doc: 'Determine current directory')
    method(name: 'pwd', type: 'Object', namedParams: [parameter(name: 'tmp', type: 'boolean'), ], doc: 'Determine current directory')
    method(name: 'readFile', type: 'Object', params: [file:'java.lang.String'], doc: 'Read file from workspace')
    method(name: 'readFile', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'encoding', type: 'java.lang.String'), ], doc: 'Read file from workspace')
    method(name: 'readMavenPom', type: 'Object', params: [:], doc: 'Read a maven project file.')
    method(name: 'readMavenPom', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), ], doc: 'Read a maven project file.')
    method(name: 'scanForIssues', type: 'Object', params: [:], doc: 'Scan files or the console log for warnings or issues')
    method(name: 'scanForIssues', type: 'Object', namedParams: [parameter(name: 'blameDisabled', type: 'boolean'), parameter(name: 'filters', type: 'Map'), parameter(name: 'sourceCodeEncoding', type: 'java.lang.String'), parameter(name: 'tool', type: 'Map'), ], doc: 'Scan files or the console log for warnings or issues')
    method(name: 'sh', type: 'Object', params: [script:'java.lang.String'], doc: 'Shell Script')
    method(name: 'sh', type: 'Object', namedParams: [parameter(name: 'script', type: 'java.lang.String'), parameter(name: 'encoding', type: 'java.lang.String'), parameter(name: 'label', type: 'java.lang.String'), parameter(name: 'returnStatus', type: 'boolean'), parameter(name: 'returnStdout', type: 'boolean'), ], doc: 'Shell Script')
    method(name: 'sha1', type: 'Object', params: [file:'java.lang.String'], doc: 'Compute the SHA1 of a given file')
    method(name: 'sshagent', type: 'Object', params: [credentials:Map, body:'Closure'], doc: 'SSH Agent')
    method(name: 'sshagent', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'credentials', type: 'Map'), parameter(name: 'ignoreMissing', type: 'boolean'), ], doc: 'SSH Agent')
    method(name: 'stash', type: 'Object', params: [name:'java.lang.String'], doc: 'Stash some files to be used later in the build')
    method(name: 'stash', type: 'Object', namedParams: [parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'allowEmpty', type: 'boolean'), parameter(name: 'excludes', type: 'java.lang.String'), parameter(name: 'includes', type: 'java.lang.String'), parameter(name: 'useDefaultExcludes', type: 'boolean'), ], doc: 'Stash some files to be used later in the build')
    method(name: 'step', type: 'Object', params: [delegate:'Map'], doc: 'General Build Step')
    method(name: 'svn', type: 'Object', params: [url:'java.lang.String'], doc: 'Subversion')
    method(name: 'svn', type: 'Object', namedParams: [parameter(name: 'url', type: 'java.lang.String'), parameter(name: 'changelog', type: 'boolean'), parameter(name: 'poll', type: 'boolean'), ], doc: 'Subversion')
    method(name: 'tee', type: 'Object', params: [file:java.lang.String, body:'Closure'], doc: 'Tee output to file')
    method(name: 'tm', type: 'Object', params: [stringWithMacro:'java.lang.String'], doc: 'Expand a string containing macros')
    method(name: 'touch', type: 'Object', params: [file:'java.lang.String'], doc: 'Create a file (if not already exist) in the workspace, and set the timestamp')
    method(name: 'touch', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'timestamp', type: 'java.lang.Long'), ], doc: 'Create a file (if not already exist) in the workspace, and set the timestamp')
    method(name: 'triggerRemoteJob', type: 'Object', params: [job:'java.lang.String'], doc: 'Trigger Remote Job')
    method(name: 'triggerRemoteJob', type: 'Object', namedParams: [parameter(name: 'job', type: 'java.lang.String'), parameter(name: 'abortTriggeredJob', type: 'boolean'), parameter(name: 'auth', type: 'Map'), parameter(name: 'blockBuildUntilComplete', type: 'boolean'), parameter(name: 'disabled', type: 'boolean'), parameter(name: 'enhancedLogging', type: 'boolean'), parameter(name: 'loadParamsFromFile', type: 'boolean'), parameter(name: 'maxConn', type: 'int'), parameter(name: 'parameterFile', type: 'java.lang.String'), parameter(name: 'parameters', type: 'java.lang.String'), parameter(name: 'pollInterval', type: 'int'), parameter(name: 'preventRemoteBuildQueue', type: 'boolean'), parameter(name: 'remoteJenkinsName', type: 'java.lang.String'), parameter(name: 'remoteJenkinsUrl', type: 'java.lang.String'), parameter(name: 'shouldNotFailBuild', type: 'boolean'), parameter(name: 'token', type: 'java.lang.String'), parameter(name: 'useCrumbCache', type: 'boolean'), parameter(name: 'useJobInfoCache', type: 'boolean'), ], doc: 'Trigger Remote Job')
    method(name: 'unstash', type: 'Object', params: [name:'java.lang.String'], doc: 'Restore files previously stashed')
    method(name: 'unzip', type: 'Object', params: [zipFile:'java.lang.String'], doc: 'Extract Zip file')
    method(name: 'unzip', type: 'Object', namedParams: [parameter(name: 'zipFile', type: 'java.lang.String'), parameter(name: 'charset', type: 'java.lang.String'), parameter(name: 'dir', type: 'java.lang.String'), parameter(name: 'glob', type: 'java.lang.String'), parameter(name: 'quiet', type: 'boolean'), parameter(name: 'read', type: 'boolean'), parameter(name: 'test', type: 'boolean'), ], doc: 'Extract Zip file')
    method(name: 'validateDeclarativePipeline', type: 'Object', params: [path:'java.lang.String'], doc: 'Validate a file containing a Declarative Pipeline')
    method(name: 'withMaven', type: 'Object', params: [body:'Closure'], doc: 'Provide Maven environment')
    method(name: 'withMaven', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'globalMavenSettingsConfig', type: 'java.lang.String'), parameter(name: 'globalMavenSettingsFilePath', type: 'java.lang.String'), parameter(name: 'jdk', type: 'java.lang.String'), parameter(name: 'maven', type: 'java.lang.String'), parameter(name: 'mavenLocalRepo', type: 'java.lang.String'), parameter(name: 'mavenOpts', type: 'java.lang.String'), parameter(name: 'mavenSettingsConfig', type: 'java.lang.String'), parameter(name: 'mavenSettingsFilePath', type: 'java.lang.String'), parameter(name: 'options', type: 'Map'), parameter(name: 'publisherStrategy', type: 'Map'), parameter(name: 'tempBinDir', type: 'java.lang.String'), ], doc: 'Provide Maven environment')
    method(name: 'wrap', type: 'Object', params: [delegate:Map, body:'Closure'], doc: 'General Build Wrapper')
    method(name: 'writeCSV', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'records', type: 'Map'), parameter(name: 'format', type: 'Map'), ], doc: 'Write content to a CSV file in the workspace.')
    method(name: 'writeFile', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'text', type: 'java.lang.String'), parameter(name: 'encoding', type: 'java.lang.String'), ], doc: 'Write file to workspace')
    method(name: 'writeJSON', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'json', type: 'Map'), parameter(name: 'pretty', type: 'int'), ], doc: 'Write JSON to a file in the workspace.')
    method(name: 'writeMavenPom', type: 'Object', params: [model:'Map'], doc: 'Write a maven project file.')
    method(name: 'writeMavenPom', type: 'Object', namedParams: [parameter(name: 'model', type: 'Map'), parameter(name: 'file', type: 'java.lang.String'), ], doc: 'Write a maven project file.')
    method(name: 'writeYaml', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'data', type: 'java.lang.Object'), parameter(name: 'charset', type: 'java.lang.String'), ], doc: 'Write a yaml from an object.')
    method(name: 'xunit', type: 'Object', params: [tools:'Map'], doc: 'Publish xUnit test result report')
    method(name: 'xunit', type: 'Object', namedParams: [parameter(name: 'tools', type: 'Map'), parameter(name: 'reduceLog', type: 'boolean'), parameter(name: 'testDataPublishers', type: 'Map'), parameter(name: 'testTimeMargin', type: 'java.lang.String'), parameter(name: 'thresholdMode', type: 'int'), parameter(name: 'thresholds', type: 'Map'), ], doc: 'Publish xUnit test result report')
    method(name: 'zip', type: 'Object', params: [zipFile:'java.lang.String'], doc: 'Create Zip file')
    method(name: 'zip', type: 'Object', namedParams: [parameter(name: 'zipFile', type: 'java.lang.String'), parameter(name: 'archive', type: 'boolean'), parameter(name: 'dir', type: 'java.lang.String'), parameter(name: 'glob', type: 'java.lang.String'), ], doc: 'Create Zip file')
    method(name: 'archive', type: 'Object', params: [includes:'java.lang.String'], doc: 'Advanced/Deprecated Archive artifacts')
    method(name: 'archive', type: 'Object', namedParams: [parameter(name: 'includes', type: 'java.lang.String'), parameter(name: 'excludes', type: 'java.lang.String'), ], doc: 'Archive artifacts')
    method(name: 'dockerFingerprintFrom', type: 'Object', namedParams: [parameter(name: 'dockerfile', type: 'java.lang.String'), parameter(name: 'image', type: 'java.lang.String'), parameter(name: 'commandLine', type: 'java.lang.String'), parameter(name: 'toolName', type: 'java.lang.String'), ], doc: 'Record trace of a Docker image used in FROM')
    method(name: 'unarchive', type: 'Object', params: [:], doc: 'Advanced/Deprecated Copy archived artifacts into the workspace')
    method(name: 'unarchive', type: 'Object', namedParams: [parameter(name: 'mapping', type: 'Map'), ], doc: 'Copy archived artifacts into the workspace')
    method(name: 'withDockerContainer', type: 'Object', params: [image:java.lang.String, body:'Closure'], doc: 'Advanced/Deprecated Run build steps inside a Docker container')
    method(name: 'withDockerContainer', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'image', type: 'java.lang.String'), parameter(name: 'args', type: 'java.lang.String'), parameter(name: 'toolName', type: 'java.lang.String'), ], doc: 'Run build steps inside a Docker container')
    method(name: 'withDockerRegistry', type: 'Object', params: [registry:Map, body:'Closure'], doc: 'Advanced/Deprecated Sets up Docker registry endpoint')
    method(name: 'withDockerRegistry', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'registry', type: 'Map'), parameter(name: 'toolName', type: 'java.lang.String'), ], doc: 'Sets up Docker registry endpoint')
    method(name: 'withDockerServer', type: 'Object', params: [server:Map, body:'Closure'], doc: 'Advanced/Deprecated Sets up Docker server endpoint')
  }
}

// Errors on:
// class org.jenkinsci.plugins.workflow.cps.steps.ParallelStep: There's no @DataBoundConstructor on any constructor of class org.jenkinsci.plugins.workflow.cps.steps.ParallelStep

